## 1. Breaking Camel Case ##
# 'camelCase' should output 'camel Case'
# https://www.codewars.com/kata/5208f99aee097e6552000148/solutions/python
def solution(s):
    newString = ''
    for i in s:
        if i.isupper():
            newString += ' '
        newString += i
    return newString

# *another solution
def solution(s):
    return ''.join(' ' + c if c.isupper() else c for c in s)
    
    
## 2. Two Sum ##
# sample: twoSum [1, 2, 3] 4 === (0, 2)
# https://www.codewars.com/kata/52c31f8e6605bcc646000082/train/python
def two_sum(numbers, target):
    for i, e1 in enumerate(numbers):
        for j, e2 in enumerate(numbers):
            if i != j:
                if (numbers[i] + numbers[j]) == target:
                    return i, j
                    
# *other solution
def two_sum(nums, t):
    for i, x in enumerate(nums):
        for j, y in enumerate(nums):
            if i != j and x + y == t:
                return [i, j]
                
                
## 3. Highest Scoring Word ##
# return the highest scoring word from the given array
# https://www.codewars.com/kata/57eb8fcdf670e99d9b000272
import string
def high(x):
    letters = list(string.ascii_lowercase[:26]) # create a list of a-z
    val = [i for i in range(1, 27)] # create a list of 1-26
    letters_and_val = dict(zip(letters, val)) # create a dictionary of values 'a':1, 'b':2
    word_list = x.split(" ")
    d = {}

    for word in word_list:
        string_sum = 0
        for i in word:
            string_sum += letters_and_val.get(i)
        d[word] = string_sum
    return max(d, key=d.get)

# other answer
def high(x):
    words=x.split(' ')
    list = []
    for i in words:
        # create a list of word values using ord() and list comprehension and sum()
        scores = [sum([ord(char) - 96 for char in i])]
        list.append(scores)
    # return the index of the max word from list as it also corresponds to the word's index
    return words[list.index(max(list))]
 
 
## 4. Title Case ##
# https://www.codewars.com/kata/5202ef17a402dd033c000009/
def title_case(title, minor_words=''):
    if not title:
        return ''
    words = title.lower().split(" ")
    minor = minor_words.lower().split(" ")

    new_word = " ".join([(word[0].upper() + word[1:].lower())
                 if word not in minor
                 else word.lower()
                 for word in words])

    final = new_word[0].upper() + new_word[1:]
    return final
    # tip to improve above code: use the capitalize()

# other answer:
def title_case(title, minor_words=''):
    title = title.capitalize().split()
    minor_words = minor_words.lower().split()
    return ' '.join([word if word in minor_words else word.capitalize() for word in title])
 
 
## 5. Simple Encryption #1 - Alternating Split ##
# https://www.codewars.com/kata/57814d79a56c88e3e0000786
def decrypt(encrypted_text, n):
    result = encrypted_text
    for i in range(n):
        result = result
        half = len(result)//2
        # variable declaration
        even, odd = result[:half], result[half:]

        #creating a list of Non elements
        decrypted = [None]*(len(even)+len(odd))
        decrypted[::2], decrypted[1::2] = odd, even
        result = ''.join(decrypted)
    return result

def encrypt(text, n):
    encrypted = text
    for i in range(n):
        encrypted = encrypted[1::2] + encrypted[::2]
    return encrypted
    
# *other answer:
def decrypt(text, n):
    if text in ("", None):
        return text
    
    ndx = len(text) // 2
    for i in range(n):
        a = text[:ndx]
        b = text[ndx:]
        text = "".join(b[i:i+1] + a[i:i+1] for i in range(ndx + 1))
    return text

def encrypt(text, n):
    for i in range(n):
        text = text[1::2] + text[::2]
    return text






                    
                    
